apply plugin: 'com.android.application'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
final def keystorePropertiesFile = rootProject.file("keystore.properties")

Properties localProps = new Properties()
File localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    localProps.load(localPropsFile.newDataInputStream())
}

def getGitVersion = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        applicationId "de.codebucket.mkkm"

        // These values are not intended to be shared public in repo!
        ext.githubToken = localProps.getProperty('githubToken') ?: '"' + System.getenv("GITHUB_TOKEN") + '"'
        ext.encryptionKey = localProps.getProperty('encryptionKey') ?: '"' + System.getenv("ENCRYPTION_KEY") + '"'

        buildConfigField "String", "GITHUB_TOKEN", ext.githubToken
        buildConfigField "String", "GIT_VERSION", "\"${getGitVersion()}\""
        buildConfigField "String", "ENCRYPTION_KEY", ext.encryptionKey

        // Internal build info values
        buildConfigField "String", "REMOTE_URL", '"' + System.getenv("DRONE_REMOTE_URL") + '"'
        buildConfigField "String", "DRONE_VERSION", '"' + System.getenv("DRONE_SYSTEM_VERSION") + '"'

        if (System.getenv("TRAVIS") == "true") {
            versionCode = Integer.valueOf(System.getenv("TRAVIS_BUILD_NUMBER"))
            versionName = System.getenv("MAJOR_MINOR") + "." + System.getenv("TRAVIS_BUILD_NUMBER")
        } else {
            versionCode 1
            versionName "dev"
        }
    }

    signingConfigs {
        travis {
            storeFile file("debug.jks")
            storePassword System.getenv("STORE_PASSWORD")
            keyAlias "release"
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    // If the keystore file exists
    if (keystorePropertiesFile.exists()) {
        // Initialize a new Properties() object called keystoreProperties.
        final def keystoreProperties = new Properties()

        // Load your keystore.properties file into the keystoreProperties object.
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        signingConfigs {
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix ".dev"
        }

        optimized {
            initWith debug
            applicationIdSuffix ".ci"
            versionNameSuffix "-ci-" + System.getenv("DRONE_BRANCH")

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (System.getenv("TRAVIS") == "true") {
                if (System.getenv("TRAVIS_EVENT_TYPE") != "pull_request") {
                    signingConfig signingConfigs.travis
                }
            }
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        abortOnError false
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // AndroidX support library
    def supportLibVersion = '1.0.0'
    implementation "androidx.appcompat:appcompat:${supportLibVersion}"
    implementation "androidx.browser:browser:${supportLibVersion}"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.preference:preference:${supportLibVersion}"
    implementation "com.takisoft.preferencex:preferencex:${supportLibVersion}"
    implementation "com.takisoft.preferencex:preferencex-ringtone:${supportLibVersion}"
    implementation "com.google.android.material:material:1.1.0-alpha10"

    // Retrofit2 with Gson
    implementation "com.squareup.okhttp3:okhttp:3.12.0"
    implementation "com.squareup.retrofit2:retrofit:2.5.0"
    implementation "com.squareup.retrofit2:converter-gson:2.5.0"
    implementation "com.google.code.gson:gson:2.8.5"

    // Room database
    def room_version = '2.1.0-alpha06'
    implementation "androidx.room:room-runtime:${room_version}"
    annotationProcessor "android.arch.persistence.room:compiler:${room_version}"

    // Utils
    implementation "cat.ereza:customactivityoncrash:2.2.0"
    implementation "me.jfenn:attribouter:0.1.3"

    // ZXing barcode library
    implementation "com.google.zxing:core:3.3.0"
}